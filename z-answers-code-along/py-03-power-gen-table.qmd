---
output: html
html-table-processing: none
jupyter: python3
---

# Code Along: Power Generation Table

## Start

Setting up.

```{python}
import polars as pl
import polars.selectors as cs
from great_tables import GT, md, style, loc
```

Importing the data.

```{python}
power_generation = pl.read_csv("../data/power-generation.csv")

power_generation
```

Let's get the data into Great Tables.

```{python}
gt_tbl_1 = GT(power_generation)

gt_tbl_1
```

## tab_source_note() and cols_width()

Add a title to the table to explain contents. Use this title:

"2023 Mean Carbon Intensity (gCO2eq/kWh) and Power Consumption Breakdown (%)"

and make sure 'Carbon Intensity' and 'Power Consumption' are in bold lettering.

```{python}
gt_tbl_2 = (
    gt_tbl_1
    .tab_header(
        title = md("2023 Median **CO2 Intensity** (gCO2eq/kWh) and "
        "**Power Consumption** Breakdown (%)"
        )
    )
)

gt_tbl_2
```

Add some explanations to the footer of the table (to further explain things).
Provide the data source (`api.electricitymap.org`) and the methodology (linking 
to `https://www.electricitymaps.com/methodology`). Also state that some
emissions factors are based on IPCC 2014 defaults, while some are based on
more accurate regional factors.

```{python}
gt_tbl_3 = (
    gt_tbl_2
    .tab_source_note(
        source_note = md("Source: <https://api.electricitymap.org> | "
        "Methodology: <https://www.electricitymaps.com/methodology> <br />"
        "Some emission factors are based on IPCC 2014 defaults, while some are "
        "based on more accurate regional factors."
        )
    )
)

gt_tbl_3
```

Make the width of the `Zone` column 120px. All other columns fixed at 85px.

```{python}
gt_tbl_4 = (
    gt_tbl_3
    .cols_width(
        cases={
            "Zone": "120px",
            **{col: "85px" for col in [x for x in power_generation.columns if x != "Zone"]}
        }
    )
)

gt_tbl_4
```

## Formatting Values Within the Table Body

Format the fractional values by turning them into percentages.

```{python}
gt_tbl_5 = (
    gt_tbl_4
    .fmt_percent(
        columns=cs.numeric()
    )
)

gt_tbl_5
```

Ensure that the `CO2 Intensity` values are formatted as integers.

```{python}
gt_tbl_6 = (
    gt_tbl_5
    .fmt_integer(columns="CO2 Intensity")
)

gt_tbl_6
```

## data_color()

Color the cells in the `CO2 Intensity` column according to value (in range of 0 to 900). Use this green to brown palette:

```py
["#00A600", "#E6E600", "#E8C32E", "#D69C4E", "#DC863B", "sienna", "sienna4", "tomato4", "brown"]
```

```{python}
gt_tbl_7 = (
    gt_tbl_6
    .data_color(
        columns="CO2 Intensity",
        palette=["#00A600", "#E6E600", "#E8C32E", "#D69C4E", "#DC863B", "sienna", "sienna4", "tomato4", "brown"],
        domain=[0, 900]
    )
)

gt_tbl_7
```

Color the cells in the `Hydro` to `Geothermal` columns according to value (in range of 0 to 1). Use this white to green palette:

```py
["snow", "chartreuse4", "chartreuse3", "#00A600"]
```

```{python}
gt_tbl_8 = (
    gt_tbl_7
    .data_color(
        columns=["Hydro", "Nuclear", "Wind", "Solar", "Geothermal"],
        palette=["snow", "chartreuse4", "chartreuse3", "#00A600"],
        domain=[0, 1]
    )
)

gt_tbl_8
```

Color the cells in the `Biomass` column according to value (in range of 0 to 0.3). Use this white to light-brown palette:

```py
["snow", "#EEC900", "#E8C32E", "#D69C4E"]
```

```{python}
gt_tbl_9 = (
    gt_tbl_8
    .data_color(
        columns="Biomass",
        palette=["snow", "#EEC900", "#E8C32E", "#D69C4E"],
        domain=[0, 0.3]
    )
)

gt_tbl_9
```

Color the cells in the `Gas` to `Oil` columns according to value (in range of 0 to 1). Use this white to dark-brown palette:

```py
["snow", "#DC863B", "#D69C4E", "sienna4", "tomato4"]
```

```{python}
gt_tbl_10 = (
    gt_tbl_9
    .data_color(
        columns=["Gas", "Coal", "Oil"],
        palette=["snow", "#DC863B", "#D69C4E", "sienna4", "tomato4"],
        domain=[0, 1]
    )
)

gt_tbl_10
```

Ensure the remaining body cells have the 'snow' color applied.

```{python}
gt_tbl_11 = (
    gt_tbl_10
    .data_color(
        columns=["Zone", "Unknown", "Hydro Discharge", "Battery Discharge"],
        palette=["snow", "snow"]
    )
)

gt_tbl_11
```

## cols_align() and tab_options()

As a starting point, align all cell contents (and the column labels) with center alignment.

```{python}
gt_tbl_12 = (
    gt_tbl_11
    .cols_align(
        align="center",
        columns=pl.col("*")
    )
)

gt_tbl_12
```

As a tweak, align the `Zone` column to the left.

```{python}
gt_tbl_13 = (
    gt_tbl_12
    .cols_align(
        align="left",
        columns="Zone"
    )
)

gt_tbl_13
```

Use the 'humanist' font stack for this table.

```{python}
gt_tbl_14 = (
    gt_tbl_13
    .opt_table_font(
        stack="humanist"
    )
)

gt_tbl_14
```

Make some serious tweaks to the table with `tab_options()`.

```{python}
gt_tbl_15 = (
    gt_tbl_14
    .tab_options(
        source_notes_font_size="x-small",
        source_notes_padding="3px",
        data_row_padding="1px",
        heading_background_color="antiquewhite",
        source_notes_background_color="antiquewhite",
        column_labels_background_color="antiquewhite",
        table_background_color="snow",
        data_row_padding_horizontal="3px",
        column_labels_padding_horizontal="10px",
        table_font_size="12px"
    )
)

gt_tbl_15
```
